#!/usr/bin/env python3

import argparse
import subprocess
import json
import os
import shutil

from pathlib import Path

USE_AFTER_FREE = 'USE_AFTER_FREE'
USE_AFTER_DELETE = 'USE_AFTER_DELETE'

RESULT_DIR = 'infer-result'


def run_tracer(package, script, is_debian):
    os.mkdir(RESULT_DIR)

    if is_debian:
        subprocess.run(
            [script, '-p', package, '-o', RESULT_DIR, '-i', '--pulse-only'])
    else:
        subprocess.run(
            [script, '-p', package, '-o', RESULT_DIR, '-a', 'capture'])

        subprocess.run([
            script, '-p', package, '-o', RESULT_DIR, '-i', '--pulse-only',
            '-a', 'analyze'
        ])

    report = open(
        Path('.') / RESULT_DIR / os.path.basename(package) / 'infer-out' /
        'report.json', 'r')
    report_json = json.load(report)
    uaf_lines = []
    for alarm in report_json:
        bug_type = alarm['bug_type']
        if bug_type == USE_AFTER_FREE or bug_type == USE_AFTER_DELETE:
            uaf_lines.append(alarm['line'])

    infer_options = '--api-misuse-only --api-misuse-max-fp 5 --api-misuse-max-set 10'
    for line in uaf_lines:
        infer_options += f' --uaf-lines {line}'

    if is_debian:
        subprocess.run(
            [script, '-p', package, '-o', RESULT_DIR, '-i', infer_options])
    else:
        subprocess.run([
            script, '-p', package, '-o', RESULT_DIR, '-i', infer_options, '-a',
            'analyze'
        ])

    subprocess.run(['./rank/tracer', RESULT_DIR, '-feat', 'high'])

    shutil.rmtree(RESULT_DIR)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--debian',
                        default=False,
                        action=argparse.BooleanOptionalAction)
    parser.add_argument('--package')
    args = parser.parse_args()

    if args.debian:
        is_debian = True
        script = './bin/run-infer-debian.sh'
    else:
        is_debian = False
        script = './bin/run-infer.sh'

    run_tracer(args.package, script, is_debian)